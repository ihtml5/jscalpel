{"version":3,"file":"jscalpel.dev.js","sources":["../index.js"],"sourcesContent":["const nativeToString = Object.prototype.toString;\r\nconst isObject = (path) => nativeToString.call(path) === '[object Object]';\r\n\r\n\r\nclass JscalpelCore {\r\n    constructor({\r\n        target,\r\n        returnedValue,\r\n        error\r\n    }) {\r\n        this._target = target;\r\n        this._error = error;\r\n        this._returnedValue = returnedValue;\r\n    }\r\n\r\n    _getValueByPath (path) {\r\n        let result = null;\r\n        let epTarget = this._target;\r\n        let keyPaths = this._fallbackpath(path).split('.')\r\n        for (let i = 0, len = keyPaths.length; i < len; i++) {\r\n          result = result ? result[keyPaths[i]] : epTarget[keyPaths[i]];\r\n          if (typeof result === undefined) {\r\n              return result;\r\n          }\r\n        }\r\n        return result\r\n    }\r\n    _getValue (path) {\r\n        let result = null;\r\n        let epTarget = this._target;\r\n        let pResult = [];\r\n        let self = this;\r\n        if (typeof path === 'string' && path.length > 0) {\r\n            return this._getValueByPath(path);\r\n        } else if (nativeToString.call(path) === '[object Array]') {\r\n            path.forEach((singlePath, idx) => {\r\n                if (typeof singlePath === 'string') {\r\n                    result = self._getValueByPath(singlePath);\r\n                    pResult.push(result);\r\n                }\r\n            })\r\n            if (pResult.length === 0) {\r\n                return null;\r\n            }\r\n            return pResult;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get (path) {\r\n        return path ? this._getValueByPath(path) : this._returnedValue;\r\n    }\r\n    _fallbackpath (path) {\r\n        if (typeof path !== 'string') {\r\n            return '';\r\n        }\r\n        return path;\r\n    }\r\n\r\n    _extend (ns, ns_string, value) {\r\n        if (isObject(ns)) {\r\n            var current = ns;\r\n            var parts = ns_string.split('.');\r\n            var pl = parts.length;\r\n            for (let i = 0; i<pl; i++) {\r\n                if (typeof current[parts[i]] === 'undefined') {\r\n                    current[parts[i]] = {};\r\n                }\r\n                if (typeof value !== 'undefined' && (i === pl-1)) {\r\n                    current = current[parts[i]] = value;\r\n                }\r\n                current = current[parts[i]];\r\n            } \r\n        }\r\n    }\r\n    _setOrDel (path, value) {\r\n        let fallbackPath = this._fallbackpath(path);\r\n        if (fallbackPath === '') {\r\n            if (typeof this._error === 'function') {\r\n                this._error(this._target, path);\r\n            }\r\n            return;\r\n        }\r\n        this._extend(this._target, fallbackPath, value);\r\n    }\r\n    set (path, value) {\r\n        if (isObject(path)) {\r\n            Object.keys(path).forEach((key, index) => {\r\n                this._setOrDel(key, path[key]);\r\n            })\r\n        } else {\r\n            this._setOrDel(path, value);\r\n        }\r\n    }\r\n\r\n    has (path) {\r\n       let returnedValue = this._getValueByPath(path);\r\n       if (!returnedValue) {\r\n           return false;\r\n       }\r\n       return true;\r\n    }\r\n\r\n    del(path) {\r\n        this._setOrDel(path, void 0);\r\n    }\r\n}\r\n\r\n\r\nconst jscalpel = ({ target, path, keys, prefix, callback, success, deep, plugins, error}, defaultOpts) => {\r\n    const compatCb = success || callback;\r\n    const enablePrefix = prefix ? true : false;\r\n    const deepCopy = (obj) => {\r\n        const returnObj = {};\r\n        let tempArr = [];\r\n        if (nativeToString.call(obj) === '[object Object]') {\r\n            Object.keys(obj).forEach((path, index) => {\r\n                if (Array.isArray(obj[path])) {\r\n                    obj[path].forEach((value, index) => {\r\n                        tempArr.push(value);\r\n                    });\r\n                    returnObj[path] = tempArr;\r\n                    tempArr = [];\r\n                } else if (nativeToString.call(obj[path] === '[object Object]')) {\r\n                    returnObj[path] = deepCopy(obj[path]);\r\n                }\r\n            });\r\n            return returnObj;\r\n        } else {\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    const autoCompletePath = (path) => {\r\n        // console.log('cccc');\r\n        return (`${prefix && enablePrefix ? `${prefix}.${path}` : `${path}`}`);\r\n    }\r\n\r\n    const getValueByPath = function ({path, target, plugins, index}) {\r\n        let result = target\r\n        let parseingPaths = (autoCompletePath(path)).split('.')\r\n        for (let i = 0, len = parseingPaths.length; i < len; i++) {\r\n          result = result[parseingPaths[i]]\r\n          if (result === undefined) {\r\n              return result;\r\n          }\r\n        }\r\n        return result\r\n      }\r\n    \r\n      const executePlugins = ({ plugins, name, value }) => {\r\n          let willPluginInfo = {\r\n              value,\r\n              name\r\n          }\r\n          if (plugins && Array.isArray(plugins) && plugins.length) {\r\n            plugins.forEach((plugin, index) => {\r\n                plugin(willPluginInfo);\r\n            });\r\n          }\r\n\r\n      } \r\n    const getParameterNames = (fn) => {\r\n        const COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n        const DEFAULT_PARAMS = /=[^,]+/mg;\r\n        const FAT_ARROWS = /=>.*$/mg;\r\n        const code = fn.toString()\r\n            .replace(COMMENTS, '')\r\n            .replace(FAT_ARROWS, '')\r\n            .replace(DEFAULT_PARAMS, '');\r\n\r\n        const result = code.slice(code.indexOf('(') + 1, code.indexOf(')'))\r\n            .match(/([^\\s,]+)/g);\r\n\r\n        return result === null\r\n            ? []\r\n            : result;\r\n    }\r\n\r\n    const getReturnedVal = (defaultValue, result, pResult) => {\r\n        if (typeof value !== 'undefined') {\r\n            return value;\r\n        } else {\r\n            return result || pResult;\r\n        }\r\n    }\r\n    //  try transform anything to object\r\n    const transformAnyToObj = (target) => {\r\n        let epTarget  = null;\r\n        try {\r\n            epTarget = typeof target === 'string' ? JSON.parse(target) : target;\r\n            if (deep) {\r\n                epTarget = deepCopy(epTarget);\r\n            }\r\n    \r\n            if (nativeToString.call(epTarget) !== '[object Object]' && !Array.isArray(epTarget)) {\r\n                typeof error === 'function' && error(epTarget);\r\n                return;\r\n            }\r\n        } catch (err) {\r\n            typeof error === 'function' && error(epTarget, err);\r\n            return;\r\n        }\r\n        return epTarget;\r\n    }\r\n\r\n    let defaultValue = null;\r\n    let result = null;\r\n    let willPluginInfo = {};\r\n    let epTarget = transformAnyToObj(target);\r\n    let pResult = null;\r\n    let cbParams = compatCb ? getParameterNames(compatCb) : [];\r\n    path = typeof path === 'function' ? path(prefix) : ( path || keys);\r\n\r\n\r\n    if (typeof path === 'string' && path.length > 0) {\r\n        result = getValueByPath({path, target});\r\n        executePlugins({plugins, name: cbParams[0], value: result});\r\n        if (compatCb && typeof compatCb === 'function') {;\r\n            defaultValue = compatCb.call(null, result, epTarget, path, defaultOpts);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n    } else if (nativeToString.call(path) === '[object Array]') {\r\n        pResult = [];\r\n        path.forEach((singlePath, idx) => {\r\n            if (typeof singlePath === 'string') {\r\n                result = getValueByPath({path: singlePath, target});\r\n                executePlugins({plugins, value: result, name: cbParams[idx]});\r\n                pResult.push(result);\r\n            }\r\n            result = null;\r\n        })\r\n        pResult.push(epTarget, path, defaultOpts);\r\n        if (compatCb && typeof compatCb === 'function') {\r\n            defaultValue = compatCb.apply(null, pResult);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n    }\r\n    if (typeof callback === 'function' || typeof success === 'function') {\r\n        return getReturnedVal(defaultValue, result, pResult.slice(0,-3));\r\n    }\r\n    return new JscalpelCore({\r\n        target: epTarget,\r\n        error\r\n    })\r\n}\r\n\r\nexport default jscalpel;"],"names":["nativeToString","Object","prototype","toString","isObject","path","call","JscalpelCore","target","returnedValue","error","_target","_error","_returnedValue","result","epTarget","keyPaths","_fallbackpath","split","i","len","length","undefined","pResult","self","_getValueByPath","forEach","singlePath","idx","push","ns","ns_string","value","current","parts","pl","fallbackPath","_extend","keys","key","index","_setOrDel","jscalpel","defaultOpts","prefix","callback","success","deep","plugins","compatCb","enablePrefix","deepCopy","obj","returnObj","tempArr","Array","isArray","autoCompletePath","getValueByPath","parseingPaths","executePlugins","name","willPluginInfo","plugin","getParameterNames","fn","COMMENTS","DEFAULT_PARAMS","FAT_ARROWS","code","replace","slice","indexOf","match","getReturnedVal","defaultValue","transformAnyToObj","JSON","parse","err","cbParams","apply"],"mappings":"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"}