{"version":3,"file":"jscalpel.min.js","sources":["../index.js"],"sourcesContent":["\r\nclass JscalpelCore {\r\n    constructor({\r\n        target,\r\n        path,\r\n        error\r\n    }) {\r\n        this._target = target;\r\n        this._path = path;\r\n        this._error = error;\r\n    }\r\n\r\n    _getValueByPath (path) {\r\n        let result = target\r\n        let pathPaths = this._fallbackpath(path).split('.')\r\n        for (let i = 0, len = pathPaths.length; i < len; i++) {\r\n          result = result[pathPaths[i]]\r\n          if (result === undefined) {\r\n              return result;\r\n          }\r\n        }\r\n        return result\r\n    }\r\n    _getValue (path) {\r\n        let result = null;\r\n        let epTarget = this._target;\r\n        let pResult = [];\r\n        let self = this;\r\n        if (typeof path === 'string' && path.length > 0) {\r\n            return this._getValueByPath(path);\r\n        } else if (Object.prototype.toString.call(path) === '[object Array]') {\r\n            path.forEach((singlePath, idx) => {\r\n                if (typeof singlePath === 'string') {\r\n                    result = self._getValueByPath(singlePath);\r\n                    pResult.push(result);\r\n                }\r\n            })\r\n            if (pResult.length === 0) {\r\n                return null;\r\n            }\r\n            return pResult;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get (path) {\r\n        return this._getValueByPath(path);\r\n    }\r\n    _fallbackpath (path) {\r\n        if (typeof path !== 'string') {\r\n            return '';\r\n        }\r\n        return path;\r\n    }\r\n    _setOrDel (path, value) {\r\n        let current = {};\r\n        let fallbacPath = this._fallbackpath(path);\r\n        if (fallbacPath === '') {\r\n            if (typeof this._error === 'function') {\r\n                this._error(this._target, path);\r\n            }\r\n            return;\r\n        }\r\n        let pathArr = fallbacPath.split('.');\r\n        let pathLens = pathArr.length;\r\n        let i = 0;\r\n        if (pathLens === 1) {\r\n            this._target[pathArr[i]] = value;\r\n            return;\r\n        }\r\n        while (i < pathLens-1) {\r\n            this._target[pathArr[i]][pathArr[i+1]] = (i === pathLens-2 ? value : {});\r\n            i++;\r\n        }\r\n    }\r\n    set (path, value) {\r\n        this._setOrDel(path, value);\r\n    }\r\n\r\n    has (path) {\r\n       let returnedValue = this._getValueByPath(path);\r\n       if (!returnedValue) {\r\n           return false;\r\n       }\r\n       return true;\r\n    }\r\n\r\n    remove(path) {\r\n        this._setOrDel(path, void 0);\r\n    }\r\n}\r\n\r\n\r\nconst jscalpel = ({ target, path, prefix, callback, success, deep, plugins, error}, defaultOpts) => {\r\n    const nativeToString = Object.prototype.toString;\r\n    const compatCb = success || callback;\r\n    let enablePrefix = prefix ? true : false;\r\n    const deepCopy = (obj) => {\r\n        const returnObj = {};\r\n        let tempArr = [];\r\n        if (nativeToString.call(obj) === '[object Object]') {\r\n            Object.path(obj).forEach((path, index) => {\r\n                if (Array.isArray(obj[path])) {\r\n                    obj[path].forEach((value, index) => {\r\n                        tempArr.push(value);\r\n                    });\r\n                    returnObj[path] = tempArr;\r\n                    tempArr = [];\r\n                } else if (nativeToString.call(obj[path] === '[object Object]')) {\r\n                    returnObj[path] = deepCopy(obj[path]);\r\n                }\r\n            });\r\n            return returnObj;\r\n        } else {\r\n            return obj;\r\n        }\r\n    }\r\n    const autoCompletepath = (path) => {\r\n        return (`${prefix && enablePrefix ? `${prefix}.${path}` : `${path}`}`);\r\n    }\r\n    const getValueByPath = function ({path, target, plugins, index}) {\r\n        // 优化: 如果检测到undefined直接跳出遍历\r\n        let result = target\r\n        let pathPaths = (autoCompletepath(path)).split('.')\r\n        for (let i = 0, len = pathPaths.length; i < len; i++) {\r\n          result = result[pathPaths[i]]\r\n          if (result === undefined) {\r\n              return result;\r\n          }\r\n        }\r\n        return result\r\n      }\r\n    \r\n      const executePlugins = ({ plugins, name, value }) => {\r\n          let willPluginInfo = {\r\n              value,\r\n              name\r\n          }\r\n          if (plugins && Array.isArray(plugins) && plugins.length) {\r\n            plugins.forEach((plugin, index) => {\r\n                plugin(willPluginInfo);\r\n            });\r\n          }\r\n\r\n      } \r\n    const getParameterNames = (fn) => {\r\n        const COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n        const DEFAULT_PARAMS = /=[^,]+/mg;\r\n        const FAT_ARROWS = /=>.*$/mg;\r\n        const code = fn.toString()\r\n            .replace(COMMENTS, '')\r\n            .replace(FAT_ARROWS, '')\r\n            .replace(DEFAULT_PARAMS, '');\r\n\r\n        const result = code.slice(code.indexOf('(') + 1, code.indexOf(')'))\r\n            .match(/([^\\s,]+)/g);\r\n\r\n        return result === null\r\n            ? []\r\n            : result;\r\n    }\r\n\r\n    //  try transform anything to object\r\n    const transformAnyToObj = (target) => {\r\n        let epTarget  = null;\r\n        try {\r\n            epTarget = typeof target === 'string' ? JSON.parse(target) : target;\r\n            if (deep) {\r\n                epTarget = deepCopy(epTarget);\r\n            }\r\n    \r\n            if (nativeToString.call(epTarget) !== '[object Object]' && !Array.isArray(epTarget)) {\r\n                typeof error === 'function' && error(epTarget);\r\n                return;\r\n            }\r\n        } catch (err) {\r\n            typeof error === 'function' && error(epTarget, err);\r\n            return;\r\n        }\r\n        return epTarget;\r\n    }\r\n\r\n    let defaultValue = null;\r\n    let result = null;\r\n    let willPluginInfo = {};\r\n    let epTarget = transformAnyToObj(target);\r\n    let pResult = [];\r\n    let cbParams = compatCb ? getParameterNames(compatCb) : [];\r\n    path = typeof path === 'function' ? path(prefix) : path;\r\n\r\n\r\n    if (typeof path === 'string' && path.length > 0) {\r\n        result = getValueByPath({path, target});\r\n        executePlugins({plugins, name: cbParams[0], value: result});\r\n        if (compatCb && typeof compatCb === 'function') {;\r\n            defaultValue = compatCb.call(null, result, epTarget, path, defaultOpts);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n    } else if (nativeToString.call(path) === '[object Array]') {\r\n        path.forEach((singlePath, idx) => {\r\n            result = null;\r\n            if (typeof singlePath === 'string') {\r\n                result = getValueByPath({path: singlePath, target});\r\n                executePlugins({plugins, value: result, name: cbParams[idx]});\r\n                pResult.push(result);\r\n            }\r\n        })\r\n        pResult.push(epTarget, path, defaultOpts);\r\n\r\n        if (compatCb && typeof compatCb === 'function') {\r\n            defaultValue = compatCb.apply(null, pResult);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n    }\r\n    \r\n    return new JscalpelCore({\r\n        target: epTarget,\r\n        path,\r\n        error\r\n    })\r\n}\r\n\r\nexport default jscalpel;"],"names":["JscalpelCore","target","path","error","_target","_path","_error","result","pathPaths","_fallbackpath","split","i","len","length","undefined","pResult","self","_getValueByPath","Object","prototype","toString","call","forEach","singlePath","idx","push","value","fallbacPath","pathArr","pathLens","_setOrDel","returnedValue","jscalpel","defaultOpts","prefix","callback","success","deep","plugins","nativeToString","compatCb","enablePrefix","deepCopy","obj","returnObj","tempArr","index","Array","isArray","autoCompletepath","getValueByPath","executePlugins","name","willPluginInfo","plugin","getParameterNames","fn","COMMENTS","DEFAULT_PARAMS","FAT_ARROWS","code","replace","slice","indexOf","match","transformAnyToObj","epTarget","JSON","parse","err","defaultValue","cbParams","apply"],"mappings":";;;;;;;;;;IACMA;gCAKC;YAHCC,MAGD,QAHCA,MAGD;YAFCC,IAED,QAFCA,IAED;YADCC,KACD,QADCA,KACD;;;;aACMC,OAAL,GAAeH,MAAf;aACKI,KAAL,GAAaH,IAAb;aACKI,MAAL,GAAcH,KAAd;;;;;wCAGaD,MAAM;gBACfK,SAASN,MAAb;gBACIO,YAAY,KAAKC,aAAL,CAAmBP,IAAnB,EAAyBQ,KAAzB,CAA+B,GAA/B,CAAhB;iBACK,IAAIC,IAAI,CAAR,EAAWC,MAAMJ,UAAUK,MAAhC,EAAwCF,IAAIC,GAA5C,EAAiDD,GAAjD,EAAsD;yBAC3CJ,OAAOC,UAAUG,CAAV,CAAP,CAAT;oBACIJ,WAAWO,SAAf,EAA0B;2BACfP,MAAP;;;mBAGCA,MAAP;;;;kCAEOL,MAAM;gBACTK,SAAS,IAAb;gBAEIQ,UAAU,EAAd;gBACIC,OAAO,IAAX;gBACI,OAAOd,IAAP,KAAgB,QAAhB,IAA4BA,KAAKW,MAAL,GAAc,CAA9C,EAAiD;uBACtC,KAAKI,eAAL,CAAqBf,IAArB,CAAP;aADJ,MAEO,IAAIgB,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BnB,IAA/B,MAAyC,gBAA7C,EAA+D;qBAC7DoB,OAAL,CAAa,UAACC,UAAD,EAAaC,GAAb,EAAqB;wBAC1B,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;iCACvBP,KAAKC,eAAL,CAAqBM,UAArB,CAAT;gCACQE,IAAR,CAAalB,MAAb;;iBAHR;oBAMIQ,QAAQF,MAAR,KAAmB,CAAvB,EAA0B;2BACf,IAAP;;uBAEGE,OAAP;;mBAEG,IAAP;;;;4BAGCb,MAAM;mBACA,KAAKe,eAAL,CAAqBf,IAArB,CAAP;;;;sCAEWA,MAAM;gBACb,OAAOA,IAAP,KAAgB,QAApB,EAA8B;uBACnB,EAAP;;mBAEGA,IAAP;;;;kCAEOA,MAAMwB,OAAO;gBAEhBC,cAAc,KAAKlB,aAAL,CAAmBP,IAAnB,CAAlB;gBACIyB,gBAAgB,EAApB,EAAwB;oBAChB,OAAO,KAAKrB,MAAZ,KAAuB,UAA3B,EAAuC;yBAC9BA,MAAL,CAAY,KAAKF,OAAjB,EAA0BF,IAA1B;;;;gBAIJ0B,UAAUD,YAAYjB,KAAZ,CAAkB,GAAlB,CAAd;gBACImB,WAAWD,QAAQf,MAAvB;gBACIF,IAAI,CAAR;gBACIkB,aAAa,CAAjB,EAAoB;qBACXzB,OAAL,CAAawB,QAAQjB,CAAR,CAAb,IAA2Be,KAA3B;;;mBAGGf,IAAIkB,WAAS,CAApB,EAAuB;qBACdzB,OAAL,CAAawB,QAAQjB,CAAR,CAAb,EAAyBiB,QAAQjB,IAAE,CAAV,CAAzB,IAA0CA,MAAMkB,WAAS,CAAf,GAAmBH,KAAnB,GAA2B,EAArE;;;;;;4BAIHxB,MAAMwB,OAAO;iBACTI,SAAL,CAAe5B,IAAf,EAAqBwB,KAArB;;;;4BAGCxB,MAAM;gBACJ6B,gBAAgB,KAAKd,eAAL,CAAqBf,IAArB,CAApB;gBACI,CAAC6B,aAAL,EAAoB;uBACT,KAAP;;mBAEG,IAAP;;;;+BAGI7B,MAAM;iBACJ4B,SAAL,CAAe5B,IAAf,EAAqB,KAAK,CAA1B;;;;;;;AAKR,IAAM8B,WAAW,SAAXA,QAAW,QAAmEC,WAAnE,EAAmF;QAAhFhC,MAAgF,SAAhFA,MAAgF;QAAxEC,IAAwE,SAAxEA,IAAwE;QAAlEgC,MAAkE,SAAlEA,MAAkE;QAA1DC,QAA0D,SAA1DA,QAA0D;QAAhDC,OAAgD,SAAhDA,OAAgD;QAAvCC,IAAuC,SAAvCA,IAAuC;QAAjCC,OAAiC,SAAjCA,OAAiC;QAAxBnC,KAAwB,SAAxBA,KAAwB;;QAC1FoC,iBAAiBrB,OAAOC,SAAP,CAAiBC,QAAxC;QACMoB,WAAWJ,WAAWD,QAA5B;QACIM,eAAeP,SAAS,IAAT,GAAgB,KAAnC;QACMQ,WAAW,SAAXA,QAAW,CAACC,GAAD,EAAS;YAChBC,YAAY,EAAlB;YACIC,UAAU,EAAd;YACIN,eAAelB,IAAf,CAAoBsB,GAApB,MAA6B,iBAAjC,EAAoD;mBACzCzC,IAAP,CAAYyC,GAAZ,EAAiBrB,OAAjB,CAAyB,UAACpB,IAAD,EAAO4C,KAAP,EAAiB;oBAClCC,MAAMC,OAAN,CAAcL,IAAIzC,IAAJ,CAAd,CAAJ,EAA8B;wBACtBA,IAAJ,EAAUoB,OAAV,CAAkB,UAACI,KAAD,EAAQoB,KAAR,EAAkB;gCACxBrB,IAAR,CAAaC,KAAb;qBADJ;8BAGUxB,IAAV,IAAkB2C,OAAlB;8BACU,EAAV;iBALJ,MAMO,IAAIN,eAAelB,IAAf,CAAoBsB,IAAIzC,IAAJ,MAAc,iBAAlC,CAAJ,EAA0D;8BACnDA,IAAV,IAAkBwC,SAASC,IAAIzC,IAAJ,CAAT,CAAlB;;aARR;mBAWO0C,SAAP;SAZJ,MAaO;mBACID,GAAP;;KAjBR;QAoBMM,mBAAmB,SAAnBA,gBAAmB,CAAC/C,IAAD,EAAU;qBACpBgC,UAAUO,YAAV,GAA4BP,MAA5B,SAAsChC,IAAtC,QAAkDA,IAA7D;KADJ;QAGMgD,iBAAiB,SAAjBA,cAAiB,QAA0C;YAA/BhD,IAA+B,SAA/BA,IAA+B;YAAzBD,MAAyB,SAAzBA,MAAyB;;;YAEzDM,SAASN,MAAb;YACIO,YAAayC,iBAAiB/C,IAAjB,CAAD,CAAyBQ,KAAzB,CAA+B,GAA/B,CAAhB;aACK,IAAIC,IAAI,CAAR,EAAWC,MAAMJ,UAAUK,MAAhC,EAAwCF,IAAIC,GAA5C,EAAiDD,GAAjD,EAAsD;qBAC3CJ,OAAOC,UAAUG,CAAV,CAAP,CAAT;gBACIJ,WAAWO,SAAf,EAA0B;uBACfP,MAAP;;;eAGCA,MAAP;KAVJ;;QAaQ4C,iBAAiB,SAAjBA,cAAiB,QAA8B;YAA3Bb,OAA2B,SAA3BA,OAA2B;YAAlBc,IAAkB,SAAlBA,IAAkB;YAAZ1B,KAAY,SAAZA,KAAY;;YAC7C2B,iBAAiB;wBAAA;;SAArB;YAIIf,WAAWS,MAAMC,OAAN,CAAcV,OAAd,CAAX,IAAqCA,QAAQzB,MAAjD,EAAyD;oBAC/CS,OAAR,CAAgB,UAACgC,MAAD,EAASR,KAAT,EAAmB;uBACxBO,cAAP;aADJ;;KANN;QAYIE,oBAAoB,SAApBA,iBAAoB,CAACC,EAAD,EAAQ;YACxBC,WAAW,kCAAjB;YACMC,iBAAiB,UAAvB;YACMC,aAAa,SAAnB;YACMC,OAAOJ,GAAGpC,QAAH,GACRyC,OADQ,CACAJ,QADA,EACU,EADV,EAERI,OAFQ,CAEAF,UAFA,EAEY,EAFZ,EAGRE,OAHQ,CAGAH,cAHA,EAGgB,EAHhB,CAAb;;YAKMnD,SAASqD,KAAKE,KAAL,CAAWF,KAAKG,OAAL,CAAa,GAAb,IAAoB,CAA/B,EAAkCH,KAAKG,OAAL,CAAa,GAAb,CAAlC,EACVC,KADU,CACJ,YADI,CAAf;;eAGOzD,WAAW,IAAX,GACD,EADC,GAEDA,MAFN;KAZJ;;;QAkBM0D,oBAAoB,SAApBA,iBAAoB,CAAChE,MAAD,EAAY;YAC9BiE,WAAY,IAAhB;YACI;uBACW,OAAOjE,MAAP,KAAkB,QAAlB,GAA6BkE,KAAKC,KAAL,CAAWnE,MAAX,CAA7B,GAAkDA,MAA7D;gBACIoC,IAAJ,EAAU;2BACKK,SAASwB,QAAT,CAAX;;;gBAGA3B,eAAelB,IAAf,CAAoB6C,QAApB,MAAkC,iBAAlC,IAAuD,CAACnB,MAAMC,OAAN,CAAckB,QAAd,CAA5D,EAAqF;uBAC1E/D,KAAP,KAAiB,UAAjB,IAA+BA,MAAM+D,QAAN,CAA/B;;;SAPR,CAUE,OAAOG,GAAP,EAAY;mBACHlE,KAAP,KAAiB,UAAjB,IAA+BA,MAAM+D,QAAN,EAAgBG,GAAhB,CAA/B;;;eAGGH,QAAP;KAhBJ;;QAmBII,eAAe,IAAnB;QACI/D,SAAS,IAAb;QAEI2D,WAAWD,kBAAkBhE,MAAlB,CAAf;QACIc,UAAU,EAAd;QACIwD,WAAW/B,WAAWe,kBAAkBf,QAAlB,CAAX,GAAyC,EAAxD;WACO,OAAOtC,IAAP,KAAgB,UAAhB,GAA6BA,KAAKgC,MAAL,CAA7B,GAA4ChC,IAAnD;;QAGI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,KAAKW,MAAL,GAAc,CAA9C,EAAiD;iBACpCqC,eAAe,EAAChD,UAAD,EAAOD,cAAP,EAAf,CAAT;uBACe,EAACqC,gBAAD,EAAUc,MAAMmB,SAAS,CAAT,CAAhB,EAA6B7C,OAAOnB,MAApC,EAAf;YACIiC,YAAY,OAAOA,QAAP,KAAoB,UAApC,EAAgD;;2BAC7BA,SAASnB,IAAT,CAAc,IAAd,EAAoBd,MAApB,EAA4B2D,QAA5B,EAAsChE,IAAtC,EAA4C+B,WAA5C,CAAf;SADJ,MAEO;2BACYO,QAAf;;KANR,MAQO,IAAID,eAAelB,IAAf,CAAoBnB,IAApB,MAA8B,gBAAlC,EAAoD;aAClDoB,OAAL,CAAa,UAACC,UAAD,EAAaC,GAAb,EAAqB;qBACrB,IAAT;gBACI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;yBACvB2B,eAAe,EAAChD,MAAMqB,UAAP,EAAmBtB,cAAnB,EAAf,CAAT;+BACe,EAACqC,gBAAD,EAAUZ,OAAOnB,MAAjB,EAAyB6C,MAAMmB,SAAS/C,GAAT,CAA/B,EAAf;wBACQC,IAAR,CAAalB,MAAb;;SALR;gBAQQkB,IAAR,CAAayC,QAAb,EAAuBhE,IAAvB,EAA6B+B,WAA7B;;YAEIO,YAAY,OAAOA,QAAP,KAAoB,UAApC,EAAgD;2BAC7BA,SAASgC,KAAT,CAAe,IAAf,EAAqBzD,OAArB,CAAf;SADJ,MAEO;2BACYyB,QAAf;;;;WAID,IAAIxC,YAAJ,CAAiB;gBACZkE,QADY;kBAAA;;KAAjB,CAAP;CA5HJ;;;;;;;;"}