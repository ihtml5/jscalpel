{"version":3,"file":"jscalpel.min.js","sources":["../index.js"],"sourcesContent":["\r\nclass JscalpelCore {\r\n    constructor({\r\n        target,\r\n        keys\r\n    }) {\r\n        this._target = target;\r\n        this._keys = keys;\r\n    }\r\n\r\n    _getValueByKeys (keys) {\r\n        let result = null;\r\n        let epTarget = this._target;\r\n        let pResult = [];\r\n        if (typeof keys === 'string' && keys.length > 0) {\r\n            keys.split('.').forEach((value, index) => {\r\n                result= (result ? result[value] : epTarget[value])\r\n                console.log('value keys', value, result);\r\n            });\r\n            return result;\r\n        } else if (Object.prototype.toString.call(keys) === '[object Array]') {\r\n            keys.forEach((singlePath, idx) => {\r\n                if (typeof singlePath === 'string') {\r\n                    singlePath.split('.').forEach((value, index) => {\r\n                        result= (result ? result[value] : epTarget[value])\r\n                    });\r\n                    if (typeof result === 'undefined' || result+'' === 'null') {\r\n                        return;\r\n                    }\r\n                    pResult.push(result);\r\n\r\n                }\r\n            })\r\n            if (pResult.length === 0) {\r\n                return null;\r\n            }\r\n            return pResult;\r\n        }\r\n        return null;\r\n    }\r\n    get (key) {\r\n        return this._getValueByKeys(key);\r\n    }\r\n    set (keys, value) {\r\n        let current = {};\r\n        let keyArr = keys.split('.');\r\n        let keyLens = keyArr.length;\r\n        let i = 0;\r\n        while (i < keyLens-1) {\r\n            if (keyLens === 1) {\r\n                this._target[keyArr[i]] = value;\r\n                break;\r\n            }\r\n            this._target[keyArr[i]][keyArr[i+1]] = (i === keyLens-2 ? value : {});\r\n            i++;\r\n        }\r\n    }\r\n\r\n    has (key) {\r\n       let returnedValue = this._getValueByKeys(key);\r\n       if (!returnedValue) {\r\n           return false;\r\n       }\r\n       return true;\r\n    }\r\n\r\n    del (keys) {\r\n        let current = {};\r\n        let keyArr = keys.split('.');\r\n        let keyLens = keyArr.length;\r\n        let i = 0;\r\n        while (i < keyLens-1) {\r\n            if (keyLens === 1) {\r\n                this._target[keyArr[i]] = value;\r\n                break;\r\n            }\r\n            this._target[keyArr[i]][keyArr[i+1]] = (i === keyLens-2 ? void 0 : {});\r\n            i++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst jscalpel = ({ target, keys, prefix, callback, success, deep, plugins, error}, defaultOpts) => {\r\n    const nativeToString = Object.prototype.toString;\r\n    const compatCb = success || callback;\r\n    let enablePrefix = prefix ? true : false;\r\n    const deepCopy = (obj) => {\r\n        const returnObj = {};\r\n        let tempArr = [];\r\n        if (nativeToString.call(obj) === '[object Object]') {\r\n            Object.keys(obj).forEach((key, index) => {\r\n                if (Array.isArray(obj[key])) {\r\n                    obj[key].forEach((value, index) => {\r\n                        tempArr.push(value);\r\n                    });\r\n                    returnObj[key] = tempArr;\r\n                    tempArr = [];\r\n                } else if (nativeToString.call(obj[key] === '[object Object]')) {\r\n                    returnObj[key] = deepCopy(obj[key]);\r\n                }\r\n            });\r\n            return returnObj;\r\n        } else {\r\n            return obj;\r\n        }\r\n    }\r\n    const autoCompleteKey = (key) => {\r\n        return (`${prefix && enablePrefix ? `${prefix}.${key}` : `${key}`}`);\r\n    }\r\n    const getParameterNames = (fn) => {\r\n        const COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n        const DEFAULT_PARAMS = /=[^,]+/mg;\r\n        const FAT_ARROWS = /=>.*$/mg;\r\n        const code = fn.toString()\r\n            .replace(COMMENTS, '')\r\n            .replace(FAT_ARROWS, '')\r\n            .replace(DEFAULT_PARAMS, '');\r\n\r\n        const result = code.slice(code.indexOf('(') + 1, code.indexOf(')'))\r\n            .match(/([^\\s,]+)/g);\r\n\r\n        return result === null\r\n            ? []\r\n            : result;\r\n    }\r\n    let defaultValue = null;\r\n    let result = null;\r\n    let epTarget = null;\r\n    const cbParams = compatCb ? getParameterNames(compatCb) : [];\r\n    let willPluginInfo = {};\r\n    if (typeof keys === 'function') {\r\n        keys = keys(prefix);\r\n    }\r\n    try {\r\n        epTarget = typeof target === 'string' ? JSON.parse(target) : target;\r\n        if (deep) {\r\n            epTarget = deepCopy(epTarget);\r\n        }\r\n\r\n        if (nativeToString.call(epTarget) !== '[object Object]' && !Array.isArray(epTarget)) {\r\n            typeof error === 'function' && error(epTarget);\r\n            return;\r\n        }\r\n    } catch (err) {\r\n        typeof error === 'function' && error(epTarget, err);\r\n        return;\r\n    }\r\n    if (typeof keys === 'string' && keys.length > 0) {\r\n        `${autoCompleteKey(keys)}`.split('.').forEach((value, index) => {\r\n            result= (result ? result[value] : epTarget[value])\r\n            willPluginInfo = {\r\n                value: result,\r\n                name: cbParams[index]\r\n            };\r\n            if (plugins && Array.isArray(plugins)) {\r\n                plugins.forEach((plugin, index) => {\r\n                    plugin(willPluginInfo);\r\n                })\r\n            }\r\n        })\r\n        if (compatCb && typeof compatCb === 'function') {;\r\n            defaultValue = compatCb.call(null, result, epTarget, keys, defaultOpts);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n        // if (typeof defaultValue === 'undefined') {\r\n        //     return result || defaultOpts;\r\n        // }\r\n        // return defaultValue;\r\n    } else if (nativeToString.call(keys) === '[object Array]') {\r\n        const pResult = [];\r\n        keys.forEach((singlePath, idx) => {\r\n            result = null;\r\n            if (typeof singlePath === 'string') {\r\n                `${autoCompleteKey(singlePath)}`.split('.').forEach((value, index) => {\r\n                    result= (result ? result[value] : epTarget[value])\r\n                });\r\n                willPluginInfo = {\r\n                    value: result,\r\n                    name: cbParams[idx]\r\n                }\r\n                if (plugins && Array.isArray(plugins)) {\r\n                    plugins.forEach((plugin, index) => {\r\n                        plugin(willPluginInfo);\r\n                    })\r\n                }\r\n                pResult.push(result);\r\n            }\r\n        })\r\n        pResult.push(epTarget,keys, defaultOpts);\r\n        if (compatCb && typeof compatCb === 'function') {\r\n            defaultValue = compatCb.apply(null, pResult);\r\n        } else {\r\n            defaultValue = compatCb;\r\n        }\r\n        // if (typeof defaultValue === 'undefined') {\r\n        //     return pResult || defaultOpts;\r\n        // }\r\n        // return defaultValue;\r\n        return new JscalpelCore({\r\n            target: epTarget,\r\n            keys\r\n        })\r\n    }\r\n}\r\n\r\nexport default jscalpel;"],"names":["JscalpelCore","target","keys","_target","_keys","result","epTarget","this","pResult","length","split","forEach","value","index","log","Object","prototype","toString","call","singlePath","idx","push","key","_getValueByKeys","keyArr","keyLens","i","defaultOpts","prefix","callback","success","deep","plugins","error","nativeToString","compatCb","enablePrefix","autoCompleteKey","cbParams","fn","COMMENTS","DEFAULT_PARAMS","FAT_ARROWS","code","replace","slice","indexOf","match","getParameterNames","willPluginInfo","JSON","parse","deepCopy","obj","returnObj","tempArr","Array","isArray","err","plugin","apply"],"mappings":"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"}